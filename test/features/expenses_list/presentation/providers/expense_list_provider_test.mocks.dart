// Mocks generated by Mockito 5.4.2 from annotations
// in safqah_assessment/test/features/expenses_list/presentation/providers/expense_list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:safqah_assessment/core/error/failures.dart' as _i5;
import 'package:safqah_assessment/core/usecases/usecase.dart' as _i10;
import 'package:safqah_assessment/features/expenses_list/domain/entities/expense_item_entity.dart'
    as _i6;
import 'package:safqah_assessment/features/expenses_list/domain/usecases/add_expense_usecase.dart'
    as _i3;
import 'package:safqah_assessment/features/expenses_list/domain/usecases/delete_expense_usecase.dart'
    as _i7;
import 'package:safqah_assessment/features/expenses_list/domain/usecases/get_expense_usecase.dart'
    as _i9;
import 'package:safqah_assessment/features/expenses_list/domain/usecases/update_expense_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddExpenseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExpenseUsecase extends _i1.Mock implements _i3.AddExpenseUsecase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>> call(
          _i3.AddExpenseParam? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ExpenseItemEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ExpenseItemEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>);
}

/// A class which mocks [DeleteExpenseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteExpenseUsecase extends _i1.Mock
    implements _i7.DeleteExpenseUsecase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> call(
          _i7.DeleteExpenseParam? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, int>>.value(
                _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);
}

/// A class which mocks [UpdateExpenseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateExpenseUsecase extends _i1.Mock
    implements _i8.UpdateExpenseUsecase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>> call(
          _i8.UpdateExpenseParam? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ExpenseItemEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.ExpenseItemEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ExpenseItemEntity>>);
}

/// A class which mocks [GetExpensesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpensesUsecase extends _i1.Mock
    implements _i9.GetExpensesUsecase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ExpenseItemEntity>>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ExpenseItemEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ExpenseItemEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ExpenseItemEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ExpenseItemEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ExpenseItemEntity>>>);
}
